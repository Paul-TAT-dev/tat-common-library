{"version":3,"file":"dropdown-Dropdown-stories.99977be9dc54c2aae099.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AAkBA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;AAGA;AAGA;AAAA;;;;;;AAEA;AACA;AAAA;;;;;;;;;;;;;;;;;AAIA;AACA;AAAA;;AACA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AARA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;AAEA","sources":["webpack://@tat/common-library/./src/dropdown/Dropdown.tsx"],"sourcesContent":["import { ChevronDown, Search, X } from \"lucide-react\";\nimport { FC, memo, useEffect, useRef, useState } from \"react\";\n\nimport \"./Dropdown.css\";\n\nexport interface DropdownType {\n  id: string;\n  label: string;\n}\n\ninterface DropdownProps {\n  id?: string;\n  value?: string;\n  isLoading?: boolean;\n  list: DropdownType[];\n  placeholder: string;\n  loadingMessage: string;\n  noDataMessage?: string;\n  handleOnClick: (dropdownId: string, item: DropdownType) => void;\n}\n\nconst Dropdown: FC<DropdownProps> = ({\n  id = \"itemList\",\n  value,\n  isLoading,\n  list,\n  placeholder,\n  loadingMessage,\n  noDataMessage = \"No matches found\",\n  handleOnClick,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [dropdownList, setDropdownList] = useState<DropdownType[]>([]);\n  const [selectedItem, setSelectedItem] = useState<string>(placeholder);\n  const [search, setSearch] = useState<string>(\"\");\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleOnSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    setSearch(value);\n  };\n\n  const handleToggleClick = (e: React.MouseEvent) => {\n    setIsOpen(!isOpen);\n    setTimeout(() => {\n      if (inputRef.current) {\n        inputRef.current.focus();\n      }\n    }, 100);\n    document.querySelectorAll(\".dropdown-menu\").forEach((menu) => {\n      if (menu.id !== id) {\n        menu.classList.remove(\"show\");\n      }\n    });\n  };\n\n  const handleClear = (e: React.MouseEvent) => {\n    handleOnClick(id, { id: \"\", label: \"\" });\n    setSelectedItem(placeholder);\n    setIsOpen(false);\n    e.stopPropagation();\n  };\n\n  useEffect(() => {\n    if (search) {\n      const filteredList = list.filter((item) =>\n        item.label.toLocaleLowerCase().includes(search.toLocaleLowerCase())\n      );\n      setDropdownList(filteredList);\n    } else {\n      setDropdownList(list);\n    }\n  }, [list, search]);\n\n  useEffect(() => {\n    if (value) {\n      const selectedItem = list.find((item) => item.id === value);\n      if (selectedItem) {\n        setSelectedItem(selectedItem.label);\n      }\n    } else {\n      setSelectedItem(placeholder);\n    }\n  }, [value]);\n\n  useEffect(() => {\n    const handleOutsideClick = (e: MouseEvent) => {\n      const dropdownMenu = document.getElementById(id);\n      const target = e.target as Element;\n      const toggleButton = target.closest(\"button\");\n      const inputElement = document.getElementById(\"search\");\n      const searchInput = document.querySelector(\"#search input\");\n      if (\n        !dropdownMenu?.contains(target) &&\n        toggleButton !== target &&\n        inputElement?.contains(target) === false &&\n        searchInput !== target\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    if (document) {\n      document.addEventListener(\"click\", handleOutsideClick);\n    }\n\n    return () => {\n      if (document) {\n        document.removeEventListener(\"click\", handleOutsideClick);\n      }\n    };\n  }, [isOpen]);\n\n  return (\n    <div className=\"mb-3\">\n      <div className=\"dropdown\">\n        <button\n          className=\"btn btn-secondary dropdown-toggle btnClass d-flex align-items-center justify-content-between col-md-12 col-sm-12\"\n          type=\"button\"\n          aria-expanded=\"false\"\n          data-bs-target={`#${id}`}\n          onClick={handleToggleClick}\n          disabled={isLoading || (dropdownList.length === 0 && search === \"\")}\n        >\n          <span\n            id={id}\n            className=\"w-100 d-flex align-items-center justify-content-between\"\n            onClick={handleToggleClick}\n          >\n            {isLoading ? (\n              <>\n                {loadingMessage}\n                <div\n                  className=\"spinner-border loadingClass\"\n                  role=\"status\"\n                ></div>\n              </>\n            ) : dropdownList.length === 0 && search === \"\" ? (\n              noDataMessage\n            ) : (\n              <span className=\"text-light\">{selectedItem}</span>\n            )}\n            {selectedItem !== placeholder && (\n              <X height=\"16px\" onClick={handleClear} />\n            )}\n          </span>\n        </button>\n        {isOpen && (\n          <div id={id} className={`${isOpen ? \"show\" : \"\"} menu dropdown-menu`}>\n            <div id=\"search\" className=\"px-3 pb-2\">\n              <input\n                className=\"w-100 small\"\n                placeholder=\"Search\"\n                onChange={handleOnSearch}\n                ref={inputRef}\n              />\n              <Search height=\"16px\" className=\"search\" />\n            </div>\n            <div className=\"menu-options overflow-auto \">\n              {dropdownList.map((item, index) => (\n                <div key={index} className=\"small\">\n                  <a\n                    className=\"dropdown-item\"\n                    onClick={() => {\n                      setSelectedItem(item.label);\n                      handleOnClick(id, item);\n                    }}\n                  >\n                    {item.label}\n                  </a>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Dropdown);\n"],"names":[],"sourceRoot":""}