{"version":3,"file":"table-pagination-pagination-stories.4d0aa2bf5506a04ab294.hot-update.js","mappings":";;;;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AAWA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;;AACA;AAAA;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;AAEA;AAAA;;AACA;AACA;AAAA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AAKA;AAGA;AAEA;AACA;AACA;AAEA;;;;;;AAPA;;;;;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AACA;AAAA;;AADA;;;;;;;;;;;;;;;;;;;;;;AAQA;AAEA","sources":["webpack://@tat/common-library/./src/table/pagination/pagination.stories.tsx","webpack://@tat/common-library/./src/table/pagination/pagination.tsx"],"sourcesContent":["import { Meta, StoryObj } from \"@storybook/react\";\nimport pagination from \"./pagination\";\n\nconst meta: Meta<typeof pagination> = {\n  component: pagination,\n  title: \"Components/pagination\",\n};\n\nexport default meta;\ntype Story = StoryObj<typeof pagination>;\n\nexport const Default: Story = {\n  args: {\n    totalItems: 100,\n    itemsPerPage: 10,\n    setItemsPerPage: () => {},\n    currentPage: 1,\n    setCurrentPage: () => {},\n    onPageChange: () => {},\n  },\n};\n","import { ChangeEvent, FC, memo, useCallback } from 'react';\n\ninterface PaginationProps {\n  totalItems: number;\n  itemsPerPage: number;\n  setItemsPerPage: (itemsPerPage: number) => void;\n  currentPage: number;\n  setCurrentPage: (pageNumber: number) => void;\n  onPageChange: (pageNumber: number, itemsPerPage: number) => void;\n}\n\nconst Pagination: FC<PaginationProps> = ({\n  totalItems,\n  itemsPerPage,\n  setItemsPerPage,\n  currentPage,\n  setCurrentPage,\n  onPageChange\n}) => {\n  const totalPages = Math.max(1, Math.ceil(totalItems / itemsPerPage));\n  const visiblePageCount = 5;\n\n  const handlePageChange = (pageNumber: number) => {\n    if (pageNumber < 1 || pageNumber > totalPages) return;\n    setCurrentPage(pageNumber);\n    onPageChange(pageNumber, itemsPerPage);\n  };\n\n  const handlePageSizeChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const newSize = parseInt(e.target.value, 10);\n    setItemsPerPage(newSize);\n    onPageChange(1, newSize);\n  };\n\n  const getPageRange = useCallback((): number[] => {\n    let start = Math.max(1, currentPage - Math.floor(visiblePageCount / 2));\n    let end = start + visiblePageCount - 1;\n\n    if (end > totalPages) {\n      end = totalPages;\n      start = Math.max(1, end - visiblePageCount + 1);\n    }\n\n    return Array.from({ length: end - start + 1 }, (_, i) => start + i);\n  }, [totalItems, itemsPerPage]);\n\n  const startItem = (currentPage - 1) * itemsPerPage + 1;\n  const endItem = Math.min(currentPage * itemsPerPage, totalItems);\n\n  return (\n    <div className=\"d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mt-3 gap-3\">\n      <span className=\"text-muted\">\n        Showing {startItem}-{endItem} of {totalItems}\n      </span>\n      <div className=\"d-flex align-items-center gap-2\">\n        <nav>\n          <ul className=\"pagination mb-0\">\n            <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n              <button\n                className=\"page-link\"\n                onClick={() => handlePageChange(1)}\n                disabled={currentPage === 1}\n              >\n                &laquo;\n              </button>\n            </li>\n\n            {getPageRange().map(page => (\n              <li\n                key={page}\n                className={`page-item ${currentPage === page ? 'active' : ''}`}\n              >\n                <button\n                  className=\"page-link\"\n                  onClick={() => handlePageChange(page)}\n                >\n                  {page}\n                </button>\n              </li>\n            ))}\n\n            <li\n              className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}\n            >\n              <button\n                className=\"page-link\"\n                onClick={() => handlePageChange(totalPages)}\n                disabled={currentPage === totalPages}\n              >\n                &raquo;\n              </button>\n            </li>\n          </ul>\n        </nav>\n        <select\n          className=\"form-select form-select-sm w-auto\"\n          value={itemsPerPage}\n          onChange={handlePageSizeChange}\n        >\n          {[10, 25, 50, 100].map(size => (\n            <option key={size} value={size}>\n              {size} / page\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Pagination);\n"],"names":[],"sourceRoot":""}